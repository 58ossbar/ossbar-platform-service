<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>ossbar-platform</artifactId>
		<groupId>com.ossbar</groupId>
		<version>1.0-SNAPSHOT</version>
	</parent>
	<artifactId>ossbar</artifactId>
	<version>2.1.0</version>
	<name>ossbar</name>
	<description>ossbar</description>
	<properties>
		<group>dev</group>
	</properties>
	<dependencies>
		<dependency>
			<groupId>com.ossbar</groupId>
			<artifactId>ossbar-platform-service</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>com.ossbar</groupId>
			<artifactId>ossbar-sso</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>com.ossbar</groupId>
			<artifactId>ossbar-platform-core</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
		</dependency>
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<!-- <finalName>${project.artifactId}_${project.version}_${maven.build.timestamp}</finalName> -->
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<excludes>
					<!--排除打包时把源代码带入jar包中，如果需要则注释即可 -->
					<exclude>**/*.java</exclude>
				</excludes>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.*</include>
				</includes>
				<excludes>
					<exclude>Dockerfile</exclude>
				</excludes>
				<!-- 不过滤，改成true会导致creatorblue.lic文件失效 -->
				<filtering>false</filtering>
			</resource>
			<!-- 单独过滤application.properties文件，填充变量 -->
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>application.yaml</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			<!-- 跳过test 相当于mvn install -Dmaven.test.skip=true -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<executions>
					<execution>
						<id>default-jar</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<excludes>
								<!--排除一些不需要打包的class文件,避免出现多个应用程序入口 -->
								<exclude>application-prod.yaml</exclude>
								<exclude>application-test.yaml</exclude>
								<exclude>application-prod-demo.yaml</exclude>
								<exclude>Dockerfile</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!--<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.0.0</version>
				<configuration>
					<dockerHost>http://192.168.1.100:2375</dockerHost>
					<imageName>creatorblue/creatorblue-platform</imageName>
					<imageTags>
						<imageTag>latest</imageTag>
					</imageTags>
					<forceTags>false</forceTags>
					<dockerDirectory>${project.basedir}/src/main/resources</dockerDirectory>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>-->
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>alone</id>
			<properties>
				<group>dev</group>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>dev</id>
			<properties>
				<group>dev</group>
			</properties>
		</profile>
		<profile>
			<id>test</id>
			<properties>
				<group>test</group>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<executions>
							<execution>
								<id>default-jar</id>
								<phase>package</phase>
								<goals>
									<goal>jar</goal>
								</goals>
								<configuration>
									<excludes>
										<!--排除一些不需要打包的class文件,避免出现多个应用程序入口 -->
										<exclude>application-prod.yaml</exclude>
										<exclude>application-dev.yaml</exclude>
										<exclude>application-prod-demo.yaml</exclude>
										<exclude>Dockerfile</exclude>
									</excludes>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<group>prod</group>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<executions>
							<execution>
								<id>default-jar</id>
								<phase>package</phase>
								<goals>
									<goal>jar</goal>
								</goals>
								<configuration>
									<excludes>
										<!--排除一些不需要打包的class文件,避免出现多个应用程序入口 -->
										<exclude>application-test.yaml</exclude>
										<exclude>application-dev.yaml</exclude>
										<exclude>application-prod-demo.yaml</exclude>
										<exclude>Dockerfile</exclude>
									</excludes>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

</project>